from machine import I2C, Pin, PWM, ADC
from neopixel import NeoPixel
from time import sleep

i2c = I2C(1, sda=Pin(18), scl=Pin(23))
print(i2c.scan())
print([hex(a) for a in i2c.scan()])

"""
# uhhh some v1 stuff
print(list(map(hex, i2c.readfrom_mem(0x22, 0, 0x1f))))
i2c.writeto_mem(0x22, 1, bytes([0]))
print(list(map(hex, i2c.readfrom_mem(0x22, 0, 0x1f))))
"""

np = NeoPixel(machine.Pin(20), 1)
np[0] = (0, 255, 0)
np.write()

pp = Pin(14, Pin.OUT, None)
#pp.value(True)
#pp.value(False)

"""
# v1 stuff
erst = Pin(17, Pin.OUT)
erst.off()
sleep(0.1)
erst.on()
"""

"""
# v1 stuff
i2c.writeto_mem(0x22, 0x00, bytes([0xf8])) #iodira
i2c.writeto_mem(0x22, 0x14, bytes([0x4])) #olata - set usb mux to default, set fusb mux to default, disable charging
sleep(0.5)
i2c.writeto_mem(0x22, 0x14, bytes([0x0])) #olata - re-enable charging
"""

def read_sensor(addr):
    data = list(i2c.readfrom_mem(addr, 0, 2))
    i = (data[0] << 4) | (data[1] >> 4)
    return i * 0.0625

# 5v step-up enabled - is necessary for buzzer
# only writing into control register because out register has all pins set to "high" already by default
#                                         *
i2c.writeto_mem(0x26, 0x07, bytes([0b11111011]))

p = PWM(pp)
p.freq(2048)

# second charging LED control
# first, set pin mode to output
#                                        *
i2c.writeto_mem(0x26, 0x06, bytes([0b11110111]))
# then, set output to 0
#                                        *
i2c.writeto_mem(0x26, 0x02, bytes([0b11110111]))

"""
# charging LED disable test
# first, set output to 0
#                                     *
i2c.writeto_mem(0x26, 0x03, bytes([0b10111111]))
# then, set pin mode to output
#                                     *
i2c.writeto_mem(0x26, 0x07, bytes([0b10111011]))
"""

"""
p.duty_u16(512)
sleep(1)
p.duty_u16(0)
"""

bl = PWM(Pin(24))
bl2 = PWM(Pin(25))

bl.freq(1000)
bl2.freq(1000)

bl.duty_u16(65536//2)
bl2.duty_u16(65536//2)

vb = ADC(26)

def get_vbat():
    val = vb.read_u16()
    return val/19859*2

print(get_vbat())

def test_shorts():
    r = [14, 13, 12, 11, 10, 9, 8]
    c = [0, 1, 2, 6, 5, 4, 3]
    o = [18, 23, 22]
    #o = [18, 23, 22, 28, 29]
    p = r+c+o
    pins = [Pin(x, Pin.IN, Pin.PULL_UP) for x in p]

    r_n = ["ROW"+str(i) for i in range(len(r))]
    c_n = ["COL"+str(i) for i in range(len(c))]
    o_n = ["TP_SDA", "TP_SCL", "TP_MOTION"]
    #o_n = ["TP_SDA", "TP_SCL", "TP_MOTION", "PI_SDA", "PI_SCL"]
    p_n = r_n + c_n + o_n

    while True:
        for _ in range(1000000):
            shorted = []
            for i, pin1 in enumerate(pins):
                pin1.init(Pin.OUT)
                pin1.value(False)
                for j, pin2 in enumerate(pins):
                    if i == j:
                        continue
                    if not pin2.value():
                        shorted.append((i, j))
                pin1.init(Pin.IN, Pin.PULL_UP)
            if shorted:
                # see if everything is shorted to everything hehe
                print(_, ",")
                if len(shorted) < len(p)*(len(p)-1) // 2:
                    # just a few shorted, gotta list those
                    for i, j in shorted:
                        print("n: {} ({}) shorted to {} ({})".format(p_n[i], p[i], p_n[j], p[j]))
                else:
                    # most of them shorted, we list exceptions instead
                    l = []
                    for i, j in shorted: # unsophisticated flattening
                        if i not in l: l.append(i)
                        if j not in l: l.append(j)
                    for i, pin in enumerate(p):
                        if i not in l:
                            print("m: {} ({}) not connected".format(p_n[i], pin))
                    #print(shorted)
            sleep(0.05)



# onboard neopixel test
leds = [
  (100, 100, 0),
  (100, 0, 100),
  (0, 100, 100),
  (100, 100, 100),
  (0, 100, 0),
  (100, 0, 0),
  (0, 0, 100),
]

def test_neopixel():
    for i in range(len(leds)*3):
        if (i % 2 == 0):
            np[0] = (0,0,0)
        else:
            np[0] = leds[(i // 2)%len(leds)]
        np.write()
        sleep(0.1)

def play_melody(notes):
    for freq, duration in notes:
        if freq == 0:
            p.duty_u16(0)
        else:
            p.duty_u16(0)
            p.freq(int(freq))
            p.duty_u16(2048*2)
        sleep(duration)
    p.duty_u16(0)
    p.freq(2048)

def play_smasnug():
    #######################################
    # SMASNUG MODE ACTIVATED
    #######################################
    print("SMASNUG")
    notes = [(659.26, 0.22), (0, 0.08), (880.0, 0.22), (0, 0.08), (880.0, 0.22), (0, 0.07), (1108.73, 0.22), (0, 0.08), (1108.73, 0.22), (0, 0.07), (880.0, 0.6), (659.26, 0.23), (0, 0.08), (659.26, 0.15), (0, -0.15), (659.26, 0.15), (0, 0.15), (659.26, 0.38), (0, 0.08), (659.26, 0.15), (987.77, 0.15), (880.0, 0.15), (830.61, 0.15), (739.99, 0.15), (659.26, 0.52), (0, 0.38), (659.26, 0.22), (0, 0.08), (880.0, 0.22), (0, 0.08), (880.0, 0.3), (1108.73, 0.23), (0, 0.07), (1108.73, 0.23), (0, 0.08), (880.0, 0.45), (0, 0.15), (659.26, 0.22), (0, 0.08), (880.0, 0.23), (0, 0.07), (830.61, 0.3), (739.99, 0.15), (830.61, 0.15), (880.0, 0.23), (0, 0.07), (622.25, 0.3), (659.26, 0.52), (0, 0.38), (659.26, 0.3), (830.61, 0.22), (0, 0.08), (830.61, 0.3), (880.0, 0.15), (830.61, 0.15), (739.99, 0.15), (830.61, 0.15), (880.0, 0.45), (0, 0.15), (659.26, 0.22), (0, 0.07), (880.0, 0.3), (830.61, 0.22), (0, 0.08), (830.61, 0.22), (0, 0.07), (830.61, 0.15), (1174.66, 0.15), (987.77, 0.15), (830.61, 0.15), (880.0, 0.53), (0, 0.38), (880.0, 0.22), (0, 0.08), (739.99, 0.22), (0, 0.07), (739.99, 0.23), (0, 0.07), (739.99, 0.22), (0, 0.08), (880.0, 0.22), (0, 0.07), (880.0, 0.53), (0, 0.07), (659.26, 0.23), (0, 0.07), (659.26, 0.23), (0, 0.07), (659.26, 0.38), (0, 0.07), (659.26, 0.15), (987.77, 0.3), (830.61, 0.3), (880.0, 0.52), (0, 0.38), (880.0, 0.22), (0, 0.07), (830.61, 0.15), (739.99, 0.07), (0, 0.07), (739.99, 0.23), (0, 0.07), (739.99, 0.15), (880.0, 0.15), (830.61, 0.15), (987.77, 0.15), (880.0, 0.52), (0, 0.07), (659.26, 0.23), (0, 0.07), (659.26, 0.23), (0, 0.07), (659.26, 0.38), (0, 0.07), (659.26, 0.15), (987.77, 0.3), (830.61, 0.3), (880.0, 0.6), (0, 0.15), (1108.73, 0.23), (0, 0.07), (1318.51, 0.15), (987.77, 0.15), (1108.73, 0.15), (880.0, 0.15), (739.99, 0.23)] #smasnug
    play_melody(notes)
    print("SMASNUGN'T")

def play_amogus():
    notes = [(0, 0.6), (523.25, 0.3), (622.25, 0.3), (698.46, 0.3), (739.99, 0.3), (698.46, 0.3), (0, -2.1), (65.41, 2.25), (0, -0.15), (622.25, 0.3), (523.25, 0.9), (466.16, 0.15), (587.33, 0.15), (523.25, 0.6), (0, 0.3), (49.0, 0.3), (0, 0.6), (523.25, 0.3), (622.25, 0.3), (698.46, 0.3), (739.99, 0.3), (698.46, 0.3), (0, -2.1), (65.41, 2.25), (0, -0.15), (622.25, 0.3), (739.99, 0.9), (0, 0.3), (739.99, 0.15), (0, 0.05), (698.46, 0.15), (0, 0.05), (622.25, 0.15), (0, -0.55), (65.41, 0.6), (739.99, 0.15), (0, 0.05), (698.46, 0.15), (0, 0.05), (622.25, 0.15), (0, -0.55), (130.81, 0.6), (0, 0.6), (523.25, 0.3), (622.25, 0.3), (0, -1.2), (65.41, 1.2), (0, -1.2), (130.81, 1.2), (698.46, 0.3), (739.99, 0.3), (698.46, 0.3), (0, -0.6), (65.41, 0.9), (0, -0.9), (130.81, 0.9), (0, -0.3), (622.25, 0.3), (523.25, 0.9), (466.16, 0.15), (0, -1.05), (130.81, 1.2), (0, -1.2), (65.41, 1.2), (0, -0.15), (587.33, 0.15), (523.25, 0.6), (0, -0.3), (130.81, 0.45), (0, -0.45), (261.63, 0.45), (233.08, 0.15), (0, -0.15), (116.54, 0.15), (196.0, 0.3), (0, -0.3), (98.0, 0.3), (0, 0.6), (523.25, 0.3), (622.25, 0.3), (0, -1.2), (65.41, 1.2), (0, -1.2), (130.81, 1.2), (698.46, 0.3), (739.99, 0.3), (698.46, 0.3), (622.25, 0.3), (0, -0.9), (77.78, 0.9), (0, -0.9), (155.56, 0.9), (92.5, 0.6), (0, -0.6), (185.0, 0.6), (0, -0.6), (739.99, 0.9), (0, -0.3), (185.0, 0.45), (0, -0.45), (92.5, 0.45), (185.0, 0.15), (0, -0.15), (92.5, 0.15), (739.99, 0.15), (185.0, 0.15), (0, -0.15), (92.5, 0.15), (0, -0.1), (698.46, 0.15), (0, 0.05), (622.25, 0.15), (0, -0.25), (185.0, 0.3), (0, -0.3), (92.5, 0.3), (739.99, 0.15), (0, -0.15), (92.5, 0.3), (0, -0.3), (185.0, 0.3), (0, -0.1), (698.46, 0.15), (0, 0.05), (622.25, 0.15), (0, -0.25), (185.0, 0.3), (0, -0.3), (92.5, 0.3), (130.81, 0.6), (0, -0.6), (65.41, 0.6), (261.63, 0.3), (311.13, 0.3), (349.23, 0.3), (369.99, 0.3), (349.23, 0.3), (311.13, 0.3), (261.63, 0.9), (233.08, 0.15), (293.66, 0.15), (261.63, 0.6), (0, -0.3), (98.0, 0.9), (0, -0.9), (49.0, 0.9), (0, 0.6), (261.63, 0.3), (0, -0.9), (65.41, 1.2), (0, -1.2), (130.81, 1.2), (0, -0.3), (311.13, 0.3), (349.23, 0.3), (369.99, 0.3), (349.23, 0.3), (0, -0.6), (155.56, 0.9), (0, -0.9), (77.78, 0.9), (0, -0.3), (311.13, 0.3), (185.0, 0.6), (0, -0.6), (92.5, 0.6), (0, -0.6), (369.99, 0.9), (0, -0.3), (92.5, 0.45), (0, -0.45), (185.0, 0.45), (92.5, 0.15), (0, -0.15), (185.0, 0.15), (369.99, 0.15), (92.5, 0.15), (0, -0.15), (185.0, 0.15), (0, -0.1), (349.23, 0.15), (0, 0.05), (311.13, 0.15), (0, -0.25), (185.0, 0.3), (0, -0.3), (92.5, 0.3), (369.99, 0.15), (0, -0.15), (92.5, 0.3), (0, -0.3), (185.0, 0.3), (0, -0.1), (349.23, 0.15), (0, 0.05), (311.13, 0.15), (0, -0.25), (185.0, 0.3), (0, -0.3), (92.5, 0.3), (0, 0.6), (523.25, 0.3), (0, -0.9), (130.81, 1.2), (0, -1.2), (65.41, 1.2), (0, -0.3), (622.25, 0.3), (698.46, 0.3), (739.99, 0.3), (698.46, 0.3), (0, -0.6), (130.81, 0.9), (0, -0.9), (65.41, 0.9), (0, -0.3), (622.25, 0.3), (523.25, 0.9), (466.16, 0.15), (587.33, 0.15), (0, -1.2), (65.41, 1.2), (0, -1.2), (130.81, 1.2), (523.25, 0.6), (0, -0.3), (130.81, 0.45), (0, -0.45), (261.63, 0.45), (116.54, 0.15), (0, -0.15), (233.08, 0.15), (196.0, 0.3), (0, -0.3), (98.0, 0.3), (0, 0.6), (523.25, 0.3), (0, -0.9), (65.41, 1.2), (0, -0.3), (622.25, 0.3), (0, -1.2), (130.81, 1.2), (698.46, 0.3), (739.99, 0.3), (698.46, 0.3), (0, -0.6), (77.78, 0.9), (0, -0.3), (622.25, 0.3), (0, -0.9), (155.56, 0.9), (92.5, 0.6), (0, -0.6), (185.0, 0.6), (0, -0.6), (739.99, 0.9), (0, -0.3), (92.5, 0.45), (0, -0.45), (185.0, 0.45), (92.5, 0.15), (0, -0.15), (185.0, 0.15), (739.99, 0.15), (185.0, 0.15), (0, -0.15), (92.5, 0.15), (0, -0.1), (698.46, 0.15), (0, 0.05), (622.25, 0.15), (0, -0.25), (92.5, 0.3), (0, -0.3), (185.0, 0.3), (739.99, 0.15), (0, -0.15), (92.5, 0.3), (0, -0.3), (185.0, 0.3), (0, -0.1), (698.46, 0.15), (0, 0.05), (622.25, 0.15), (0, -0.25), (92.5, 0.3), (0, -0.3), (185.0, 0.3), (130.81, 0.6), (0, -0.6), (65.41, 0.6), (261.63, 0.3), (311.13, 0.3), (349.23, 0.3), (369.99, 0.3), (349.23, 0.3), (311.13, 0.3), (261.63, 0.9), (233.08, 0.15), (293.66, 0.15), (261.63, 0.6), (0, -0.3), (98.0, 0.9), (0, -0.9), (49.0, 0.9), (0, 0.6), (261.63, 0.3), (0, -0.9), (130.81, 1.2), (0, -1.2), (65.41, 1.2), (0, -0.3), (311.13, 0.3), (349.23, 0.3), (369.99, 0.3), (349.23, 0.3), (0, -0.6), (155.56, 0.9), (0, -0.9), (77.78, 0.9), (0, -0.3), (311.13, 0.3), (185.0, 0.6), (0, -0.6), (92.5, 0.6), (0, -0.6), (369.99, 0.9), (0, 0.6), (77.78, 0.3), (0, -0.3), (155.56, 0.3), (185.0, 0.6), (0, -0.6), (92.5, 0.6), (0, 0.6), (523.25, 0.3), (622.25, 0.3), (0, -1.2), (65.41, 1.2), (0, -1.2), (130.81, 1.2), (698.46, 0.3), (739.99, 0.3), (698.46, 0.3), (0, -0.6), (130.81, 0.9), (0, -0.3), (622.25, 0.3), (0, -0.9), (65.41, 0.9), (523.25, 0.9), (466.16, 0.15), (0, -1.05), (65.41, 1.2), (0, -0.15), (587.33, 0.15), (0, -1.2), (130.81, 1.2), (523.25, 0.6), (0, -0.3), (261.63, 0.45), (0, -0.45), (130.81, 0.45), (233.08, 0.15), (0, -0.15), (116.54, 0.15), (196.0, 0.3), (0, -0.3), (98.0, 0.3), (0, 0.6), (523.25, 0.3), (622.25, 0.3), (0, -1.2), (65.41, 1.2), (0, -1.2), (130.81, 1.2), (698.46, 0.3), (739.99, 0.3), (698.46, 0.3), (0, -0.6), (155.56, 0.9), (0, -0.3), (622.25, 0.3), (0, -0.9), (77.78, 0.9), (185.0, 0.6), (0, -0.6), (92.5, 0.6), (0, -0.6), (739.99, 0.9), (0, -0.3), (92.5, 0.45), (0, -0.45), (185.0, 0.45), (185.0, 0.15), (0, -0.15), (92.5, 0.15), (739.99, 0.15), (185.0, 0.15), (0, -0.15), (92.5, 0.15), (0, -0.1), (698.46, 0.15), (0, 0.05), (622.25, 0.15), (0, -0.25), (185.0, 0.3), (0, -0.3), (92.5, 0.3), (739.99, 0.15), (0, -0.15), (185.0, 0.3), (0, -0.3), (92.5, 0.3), (0, -0.1), (698.46, 0.15), (0, 0.05), (622.25, 0.15), (0, -0.25), (185.0, 0.3), (0, -0.3), (92.5, 0.3), (523.25, 2.25), (0, -1.65), (130.81, 1.65), (0, -1.65), (65.41, 1.65)] # amogus
    play_melody(notes)

def play_nyan():
    notes = [(739.99, 0.21), (830.61, 0.11), (0, 0.11), (554.37, 0.11), (622.25, 0.21), (493.88, 0.05), (0, 0.05), (587.33, 0.11), (554.37, 0.11), (493.88, 0.11), (0, 0.11), (493.88, 0.11), (0, 0.11), (554.37, 0.21), (587.33, 0.11), (0, 0.11), (587.33, 0.05), (0, 0.05), (554.37, 0.05), (0, 0.05), (493.88, 0.11), (554.37, 0.11), (622.25, 0.11), (739.99, 0.11), (830.61, 0.11), (622.25, 0.11), (739.99, 0.11), (554.37, 0.11), (587.33, 0.11), (493.88, 0.11), (554.37, 0.11), (493.88, 0.11), (622.25, 0.21), (739.99, 0.11), (0, 0.11), (830.61, 0.11), (622.25, 0.11), (739.99, 0.11), (554.37, 0.11), (587.33, 0.11), (493.88, 0.11), (554.37, 0.11), (622.25, 0.11), (587.33, 0.11), (554.37, 0.11), (493.88, 0.11), (554.37, 0.11), (587.33, 0.11), (0, 0.11), (493.88, 0.11), (554.37, 0.11), (587.33, 0.11), (739.99, 0.11), (554.37, 0.11), (587.33, 0.11), (554.37, 0.11), (493.88, 0.11), (554.37, 0.11), (0, 0.11), (493.88, 0.11), (0, 0.11), (554.37, 0.11), (0, 0.11), (739.99, 0.21), (830.61, 0.11), (0, 0.11), (554.37, 0.11), (622.25, 0.21), (493.88, 0.05), (0, 0.05), (587.33, 0.11), (554.37, 0.11), (493.88, 0.11), (0, 0.11), (493.88, 0.11), (0, 0.11), (554.37, 0.21), (587.33, 0.11), (0, 0.11), (587.33, 0.05), (0, 0.05), (554.37, 0.05), (0, 0.05), (493.88, 0.11), (554.37, 0.11), (622.25, 0.11), (739.99, 0.11), (830.61, 0.11), (622.25, 0.11), (739.99, 0.11), (554.37, 0.11), (587.33, 0.11), (493.88, 0.11), (554.37, 0.11), (493.88, 0.11), (622.25, 0.21), (739.99, 0.11), (0, 0.11), (830.61, 0.11), (622.25, 0.11), (739.99, 0.11), (554.37, 0.11), (587.33, 0.11), (493.88, 0.11), (554.37, 0.11), (622.25, 0.11), (587.33, 0.11), (554.37, 0.11), (493.88, 0.11), (554.37, 0.11), (587.33, 0.11), (0, 0.11), (493.88, 0.11), (554.37, 0.11), (587.33, 0.11), (739.99, 0.11), (554.37, 0.11), (587.33, 0.11), (554.37, 0.11), (493.88, 0.11), (554.37, 0.21), (493.88, 0.11), (0, 0.11), (493.88, 0.11), (0, 0.11), (493.88, 0.11), (0, 0.11), (369.99, 0.11), (415.3, 0.11), (493.88, 0.11), (0, 0.11), (369.99, 0.11), (415.3, 0.11), (493.88, 0.11), (554.37, 0.11), (622.25, 0.11), (554.37, 0.11), (659.26, 0.11), (622.25, 0.11), (659.26, 0.11), (739.99, 0.11), (493.88, 0.11), (0, 0.11), (493.88, 0.11), (0, 0.11), (369.99, 0.11), (415.3, 0.11), (493.88, 0.11), (415.3, 0.11), (659.26, 0.11), (622.25, 0.11), (554.37, 0.11), (493.88, 0.11), (369.99, 0.11), (311.13, 0.11), (329.63, 0.11), (369.99, 0.11), (493.88, 0.11), (0, 0.11), (369.99, 0.11), (415.3, 0.11), (493.88, 0.11), (0, 0.11), (369.99, 0.11), (415.3, 0.11), (493.88, 0.11), (493.88, 0.11), (554.37, 0.11), (622.25, 0.11), (493.88, 0.11), (369.99, 0.11), (415.3, 0.11), (369.99, 0.11), (493.88, 0.21), (493.88, 0.11), (466.16, 0.11), (493.88, 0.11), (369.99, 0.11), (415.3, 0.11), (493.88, 0.11), (659.26, 0.11), (622.25, 0.11), (659.26, 0.11), (739.99, 0.11), (493.88, 0.11), (0, 0.11), (466.16, 0.11), (0, 0.11), (493.88, 0.11), (0, 0.11), (369.99, 0.11), (415.3, 0.11), (493.88, 0.11), (0, 0.11), (369.99, 0.11), (415.3, 0.11), (493.88, 0.11), (554.37, 0.11), (622.25, 0.11), (554.37, 0.11), (659.26, 0.11), (622.25, 0.11), (659.26, 0.11), (739.99, 0.11), (493.88, 0.11), (0, 0.11), (493.88, 0.11), (0, 0.11), (369.99, 0.11), (415.3, 0.11), (493.88, 0.11), (415.3, 0.11), (659.26, 0.11), (622.25, 0.11), (554.37, 0.11), (493.88, 0.11), (369.99, 0.11), (311.13, 0.11), (329.63, 0.11), (369.99, 0.11), (493.88, 0.11), (0, 0.11), (369.99, 0.11), (415.3, 0.11), (493.88, 0.11), (0, 0.11), (369.99, 0.11), (415.3, 0.11), (493.88, 0.11), (493.88, 0.11), (554.37, 0.11), (622.25, 0.11), (493.88, 0.11), (369.99, 0.11), (415.3, 0.11), (369.99, 0.11), (493.88, 0.21), (493.88, 0.11), (466.16, 0.11), (493.88, 0.11), (369.99, 0.11), (415.3, 0.11), (493.88, 0.11), (659.26, 0.11), (622.25, 0.11), (659.26, 0.11), (739.99, 0.11), (493.88, 0.21), (554.37, 0.21), (739.99, 0.21), (830.61, 0.11), (0, 0.11), (554.37, 0.11), (622.25, 0.21), (493.88, 0.05), (0, 0.05), (587.33, 0.11), (554.37, 0.11), (493.88, 0.11), (0, 0.11), (493.88, 0.11), (0, 0.11), (554.37, 0.21), (587.33, 0.11), (0, 0.11), (587.33, 0.05), (0, 0.05), (554.37, 0.05), (0, 0.05), (493.88, 0.11), (554.37, 0.11), (622.25, 0.11), (739.99, 0.11), (830.61, 0.11), (622.25, 0.11), (739.99, 0.11), (554.37, 0.11), (587.33, 0.11), (493.88, 0.11), (554.37, 0.11), (493.88, 0.11), (622.25, 0.21), (739.99, 0.11), (0, 0.11), (830.61, 0.11), (622.25, 0.11), (739.99, 0.11), (554.37, 0.11), (587.33, 0.11), (493.88, 0.11), (554.37, 0.11), (622.25, 0.11), (587.33, 0.11), (554.37, 0.11), (493.88, 0.11), (554.37, 0.11), (587.33, 0.11), (0, 0.11), (493.88, 0.11), (554.37, 0.11), (587.33, 0.11), (739.99, 0.11), (554.37, 0.11), (587.33, 0.11), (554.37, 0.11), (493.88, 0.11), (554.37, 0.11), (0, 0.11), (493.88, 0.11), (0, 0.11), (554.37, 0.11), (0, 0.11), (739.99, 0.21), (830.61, 0.11), (0, 0.11), (554.37, 0.11), (622.25, 0.21), (493.88, 0.05), (0, 0.05), (587.33, 0.11), (554.37, 0.11), (493.88, 0.11), (0, 0.11), (493.88, 0.11), (0, 0.11), (554.37, 0.21), (587.33, 0.11), (0, 0.11), (587.33, 0.05), (0, 0.05), (554.37, 0.05), (0, 0.05), (493.88, 0.11), (554.37, 0.11), (622.25, 0.11), (739.99, 0.11), (830.61, 0.11), (622.25, 0.11), (739.99, 0.11), (554.37, 0.11), (587.33, 0.11), (493.88, 0.11), (554.37, 0.11), (493.88, 0.11), (622.25, 0.21), (739.99, 0.11), (0, 0.11), (830.61, 0.11), (622.25, 0.11), (739.99, 0.11), (554.37, 0.11), (587.33, 0.11), (493.88, 0.11), (554.37, 0.11), (622.25, 0.11), (587.33, 0.11), (554.37, 0.11), (493.88, 0.11), (554.37, 0.11), (587.33, 0.11), (0, 0.11), (493.88, 0.11), (554.37, 0.11), (587.33, 0.11), (739.99, 0.11), (554.37, 0.11), (587.33, 0.11), (554.37, 0.11), (493.88, 0.11), (554.37, 0.21), (493.88, 0.11), (0, 0.11), (493.88, 0.11), (0, 0.11), (493.88, 0.11), (0, 0.11), (369.99, 0.11), (415.3, 0.11), (493.88, 0.11), (0, 0.11), (369.99, 0.11), (415.3, 0.11), (493.88, 0.11), (554.37, 0.11), (622.25, 0.11), (554.37, 0.11), (659.26, 0.11), (622.25, 0.11), (659.26, 0.11), (739.99, 0.11), (493.88, 0.11), (0, 0.11), (493.88, 0.11), (0, 0.11), (369.99, 0.11), (415.3, 0.11), (493.88, 0.11), (415.3, 0.11), (659.26, 0.11), (622.25, 0.11), (554.37, 0.11), (493.88, 0.11), (369.99, 0.11), (311.13, 0.11), (329.63, 0.11), (369.99, 0.11), (493.88, 0.11), (0, 0.11), (369.99, 0.11), (415.3, 0.11), (493.88, 0.11), (0, 0.11), (369.99, 0.11), (415.3, 0.11), (493.88, 0.11), (493.88, 0.11), (554.37, 0.11), (622.25, 0.11), (493.88, 0.11), (369.99, 0.11), (415.3, 0.11), (369.99, 0.11), (493.88, 0.21), (493.88, 0.11), (466.16, 0.11), (493.88, 0.11), (369.99, 0.11), (415.3, 0.11), (493.88, 0.11), (659.26, 0.11), (622.25, 0.11), (659.26, 0.11), (739.99, 0.11), (493.88, 0.11), (0, 0.11), (466.16, 0.11), (0, 0.11), (493.88, 0.11), (0, 0.11), (369.99, 0.11), (415.3, 0.11), (493.88, 0.11), (0, 0.11), (369.99, 0.11), (415.3, 0.11), (493.88, 0.11), (554.37, 0.11), (622.25, 0.11), (554.37, 0.11), (659.26, 0.11), (622.25, 0.11), (659.26, 0.11), (739.99, 0.11), (493.88, 0.11), (0, 0.11), (493.88, 0.11), (0, 0.11), (369.99, 0.11), (415.3, 0.11), (493.88, 0.11), (415.3, 0.11), (659.26, 0.11), (622.25, 0.11), (554.37, 0.11), (493.88, 0.11), (369.99, 0.11), (311.13, 0.11), (329.63, 0.11), (369.99, 0.11), (493.88, 0.11), (0, 0.11), (369.99, 0.11), (415.3, 0.11), (493.88, 0.11), (0, 0.11), (369.99, 0.11), (415.3, 0.11), (493.88, 0.11), (493.88, 0.11), (554.37, 0.11), (622.25, 0.11), (493.88, 0.11), (369.99, 0.11), (415.3, 0.11), (369.99, 0.11), (493.88, 0.21), (493.88, 0.11), (466.16, 0.11), (493.88, 0.11), (369.99, 0.11), (415.3, 0.11), (493.88, 0.11), (659.26, 0.11), (622.25, 0.11), (659.26, 0.11), (739.99, 0.11), (493.88, 0.21), (554.37, 0.21), (164.81, 0.21), (0, -0.21), (164.81, 0.21), (329.63, 0.21), (0, -0.21), (329.63, 0.21), (185.0, 0.21), (0, -0.21), (185.0, 0.21), (369.99, 0.21), (0, -0.21), (369.99, 0.21), (155.56, 0.21), (0, -0.21), (155.56, 0.21), (311.13, 0.21), (0, -0.21), (311.13, 0.21), (207.65, 0.21), (0, -0.21), (207.65, 0.21), (415.3, 0.21), (0, -0.21), (415.3, 0.21), (138.59, 0.21), (0, -0.21), (138.59, 0.21), (277.18, 0.21), (0, -0.21), (277.18, 0.21), (185.0, 0.21), (0, -0.21), (185.0, 0.21), (369.99, 0.21), (0, -0.21), (369.99, 0.21), (123.47, 0.21), (0, -0.21), (123.47, 0.21), (246.94, 0.21), (0, -0.21), (246.94, 0.21), (123.47, 0.21), (0, -0.21), (123.47, 0.21), (246.94, 0.21), (0, -0.21), (246.94, 0.21), (164.81, 0.21), (329.63, 0.21), (185.0, 0.21), (369.99, 0.21), (155.56, 0.21), (311.13, 0.21), (207.65, 0.21), (415.3, 0.21), (138.59, 0.21), (277.18, 0.21), (185.0, 0.21), (369.99, 0.21), (123.47, 0.21), (246.94, 0.21), (123.47, 0.21), (246.94, 0.21), (164.81, 0.21), (329.63, 0.21), (185.0, 0.21), (369.99, 0.21), (155.56, 0.21), (311.13, 0.21), (207.65, 0.21), (415.3, 0.21), (138.59, 0.21), (277.18, 0.21), (185.0, 0.21), (0, -0.21), (185.0, 0.21), (369.99, 0.21), (0, -0.21), (369.99, 0.21), (123.47, 0.21), (246.94, 0.21), (123.47, 0.21), (246.94, 0.21), (164.81, 0.21), (329.63, 0.21), (185.0, 0.21), (369.99, 0.21), (155.56, 0.21), (311.13, 0.21), (207.65, 0.21), (415.3, 0.21), (138.59, 0.21), (277.18, 0.21), (185.0, 0.21), (369.99, 0.21), (123.47, 0.21), (246.94, 0.21), (123.47, 0.21), (246.94, 0.21), (164.81, 0.21), (207.65, 0.21), (246.94, 0.21), (329.63, 0.21), (155.56, 0.21), (185.0, 0.21), (246.94, 0.21), (311.13, 0.21), (138.59, 0.21), (164.81, 0.21), (207.65, 0.21), (246.94, 0.21), (123.47, 0.21), (155.56, 0.21), (185.0, 0.21), (246.94, 0.21), (164.81, 0.21), (207.65, 0.21), (246.94, 0.21), (329.63, 0.21), (155.56, 0.21), (185.0, 0.21), (246.94, 0.21), (311.13, 0.21), (138.59, 0.21), (164.81, 0.21), (207.65, 0.21), (246.94, 0.21), (123.47, 0.21), (155.56, 0.21), (185.0, 0.21), (246.94, 0.21), (164.81, 0.21), (207.65, 0.21), (246.94, 0.21), (329.63, 0.21), (155.56, 0.21), (185.0, 0.21), (246.94, 0.21), (311.13, 0.21), (138.59, 0.21), (164.81, 0.21), (207.65, 0.21), (246.94, 0.21), (123.47, 0.21), (155.56, 0.21), (185.0, 0.21), (246.94, 0.21), (164.81, 0.21), (207.65, 0.21), (246.94, 0.21), (329.63, 0.21), (155.56, 0.21), (185.0, 0.21), (246.94, 0.21), (311.13, 0.21), (138.59, 0.21), (164.81, 0.21), (207.65, 0.21), (246.94, 0.21), (123.47, 0.21), (155.56, 0.21), (185.0, 0.21), (246.94, 0.21), (164.81, 0.21), (0, -0.21), (164.81, 0.21), (329.63, 0.21), (0, -0.21), (329.63, 0.21), (185.0, 0.21), (0, -0.21), (185.0, 0.21), (369.99, 0.21), (0, -0.21), (369.99, 0.21), (155.56, 0.21), (0, -0.21), (155.56, 0.21), (311.13, 0.21), (0, -0.21), (311.13, 0.21), (207.65, 0.21), (0, -0.21), (207.65, 0.21), (415.3, 0.21), (0, -0.21), (415.3, 0.21), (138.59, 0.21), (0, -0.21), (138.59, 0.21), (277.18, 0.21), (0, -0.21), (277.18, 0.21), (185.0, 0.21), (0, -0.21), (185.0, 0.21), (369.99, 0.21), (0, -0.21), (369.99, 0.21), (123.47, 0.21), (0, -0.21), (123.47, 0.21), (246.94, 0.21), (0, -0.21), (246.94, 0.21), (123.47, 0.21), (0, -0.21), (123.47, 0.21), (246.94, 0.21), (0, -0.21), (246.94, 0.21), (164.81, 0.21), (329.63, 0.21), (185.0, 0.21), (369.99, 0.21), (155.56, 0.21), (311.13, 0.21), (207.65, 0.21), (415.3, 0.21), (138.59, 0.21), (277.18, 0.21), (185.0, 0.21), (369.99, 0.21), (123.47, 0.21), (246.94, 0.21), (123.47, 0.21), (246.94, 0.21), (164.81, 0.21), (329.63, 0.21), (185.0, 0.21), (369.99, 0.21), (155.56, 0.21), (311.13, 0.21), (207.65, 0.21), (415.3, 0.21), (138.59, 0.21), (277.18, 0.21), (185.0, 0.21), (0, -0.21), (185.0, 0.21), (369.99, 0.21), (0, -0.21), (369.99, 0.21), (123.47, 0.21), (246.94, 0.21), (123.47, 0.21), (246.94, 0.21), (164.81, 0.21), (329.63, 0.21), (185.0, 0.21), (369.99, 0.21), (155.56, 0.21), (311.13, 0.21), (207.65, 0.21), (415.3, 0.21), (138.59, 0.21), (277.18, 0.21), (185.0, 0.21), (369.99, 0.21), (123.47, 0.21), (246.94, 0.21), (123.47, 0.21), (246.94, 0.21), (164.81, 0.21), (207.65, 0.21), (246.94, 0.21), (329.63, 0.21), (155.56, 0.21), (185.0, 0.21), (246.94, 0.21), (311.13, 0.21), (138.59, 0.21), (164.81, 0.21), (207.65, 0.21), (246.94, 0.21), (123.47, 0.21), (155.56, 0.21), (185.0, 0.21), (246.94, 0.21), (164.81, 0.21), (207.65, 0.21), (246.94, 0.21), (329.63, 0.21), (155.56, 0.21), (185.0, 0.21), (246.94, 0.21), (311.13, 0.21), (138.59, 0.21), (164.81, 0.21), (207.65, 0.21), (246.94, 0.21), (123.47, 0.21), (155.56, 0.21), (185.0, 0.21), (246.94, 0.21), (164.81, 0.21), (207.65, 0.21), (246.94, 0.21), (329.63, 0.21), (155.56, 0.21), (185.0, 0.21), (246.94, 0.21), (311.13, 0.21), (138.59, 0.21), (164.81, 0.21), (207.65, 0.21), (246.94, 0.21), (123.47, 0.21), (155.56, 0.21), (185.0, 0.21), (246.94, 0.21), (164.81, 0.21), (207.65, 0.21), (246.94, 0.21), (329.63, 0.21), (155.56, 0.21), (185.0, 0.21), (246.94, 0.21), (311.13, 0.21), (138.59, 0.21), (164.81, 0.21), (207.65, 0.21), (246.94, 0.21), (123.47, 0.21), (155.56, 0.21), (185.0, 0.21), (246.94, 0.21), (622.25, 0.11), (659.26, 0.11), (739.99, 0.21), (987.77, 0.21), (622.25, 0.11), (659.26, 0.11), (739.99, 0.11), (987.77, 0.11), (1108.73, 0.11), (1244.51, 0.11), (1108.73, 0.11), (932.33, 0.11), (987.77, 0.21), (739.99, 0.21), (622.25, 0.11), (659.26, 0.11), (739.99, 0.21), (987.77, 0.11), (1108.73, 0.21), (932.33, 0.11), (987.77, 0.11), (1108.73, 0.11), (1318.51, 0.11), (1244.51, 0.11), (1318.51, 0.11), (1108.73, 0.11)] # nyan
    play_melody(notes)


def test_sensors():
    while True:
        for i in [0x48, 0x49, 0x4a, 0x4b]:
            print(read_sensor(i), end=' ')
        print(); sleep(0.5)

test_neopixel()
#test_sensors()
#test_shorts()
